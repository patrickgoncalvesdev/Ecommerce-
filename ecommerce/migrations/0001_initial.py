# Generated by Django 5.0.1 on 2024-04-15 02:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import ecommerce.models.administration
import ecommerce.models.affiliate_quotation
import ecommerce.models.lottery
import ecommerce.models.pule
import ecommerce.models.verification
import ecommerce.utils.verifications
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserAPI",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("cpf", models.CharField(max_length=11, unique=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("phone", models.CharField(blank=True, max_length=11, null=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="userapi_set",
                        related_query_name="userapi",
                        to="auth.group",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="userapi_set",
                        related_query_name="userapi",
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário",
                "verbose_name_plural": "Usuários",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AffiliateConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "percent",
                    models.DecimalField(decimal_places=2, default=25, max_digits=10),
                ),
            ],
            options={
                "verbose_name": "Configuração Afiliado",
                "verbose_name_plural": "Configurações Afiliados",
            },
        ),
        migrations.CreateModel(
            name="FirstDeposit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.DecimalField(decimal_places=2, default=300, max_digits=10),
                ),
                (
                    "percent",
                    models.DecimalField(decimal_places=2, default=25, max_digits=10),
                ),
            ],
            options={
                "verbose_name": "Primeiro Depósito",
                "verbose_name_plural": "Primeiros Depósitos",
            },
        ),
        migrations.CreateModel(
            name="Lottery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lotery_key", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "automato_payload",
                    models.JSONField(
                        default=ecommerce.models.lottery.Automato.get_automato_default,
                        help_text="Payload para o automato",
                    ),
                ),
            ],
            options={
                "verbose_name": "Loteria",
                "verbose_name_plural": "Loterias",
            },
        ),
        migrations.CreateModel(
            name="MessagesTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "register_message",
                    models.TextField(
                        default="Clique no link abaixo para ativar a conta\n    https://jb.ecommerce/register/activated?code={{user_code}} ou utilize o código {{user_code}}",
                        verbose_name="Mensagem registro (html) contexto(payload,user,status)",
                    ),
                ),
                (
                    "update_message",
                    models.TextField(
                        default="Clique no link abaixo para atualizar o perfil\n    https://jb.ecommerce/register/activated?code={{user_code}} ou utilize o código {{user_code}}",
                        verbose_name="Mensagem atualização (html) contexto(payload,user,status)",
                    ),
                ),
                (
                    "recovery_message",
                    models.TextField(
                        default="Clique no link abaixo para recuperar a senha\n    https://jb.ecommerce/register/activated?code={{user_code}} ou utilize o código {{user_code}}",
                        verbose_name="Mensagem atualização (html) contexto(payload,user,status)",
                    ),
                ),
                (
                    "sms_register_message",
                    models.CharField(
                        default="DATAGAMING - Utilize o seguinte código para ativar sua conta: {{user_code}}",
                        max_length=255,
                        verbose_name="Mensagem registro (sms)",
                    ),
                ),
                (
                    "sms_update_message",
                    models.CharField(
                        default="DATAGAMING - Utilize o seguinte código para atualizar seu perfil: {{user_code}}",
                        max_length=255,
                        verbose_name="Mensagem atualização (sms)",
                    ),
                ),
                (
                    "sms_recovery_message",
                    models.CharField(
                        default="DATAGAMING - Utilize o seguinte código para recuperar a senha: {{user_code}}",
                        max_length=255,
                        verbose_name="Mensagem atualização (sms)",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Placing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("award_range", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Colocação",
                "verbose_name_plural": "Colocações",
            },
        ),
        migrations.CreateModel(
            name="Quotation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Cotação",
                "verbose_name_plural": "Cotações",
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "money",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "bonus",
                    models.DecimalField(
                        decimal_places=2, default=5000.0, max_digits=10
                    ),
                ),
                (
                    "commission",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Carteira",
                "verbose_name_plural": "Carteiras",
            },
        ),
        migrations.CreateModel(
            name="AdministrativeUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "profile",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Administrador"),
                            ("SUPERVISOR", "Supervisor"),
                            ("MANAGER", "Gerente"),
                        ],
                        max_length=20,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "commission",
                    models.CharField(
                        choices=[("LIQUID", "Líquido"), ("GROSS", "Bruto")],
                        default="LIQUID",
                        max_length=10,
                    ),
                ),
                (
                    "percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Comissão %",
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="administrative_users",
                        related_query_name="administrative_user",
                        to="auth.group",
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="administrative_users",
                        related_query_name="administrative_user",
                        to="auth.permission",
                    ),
                ),
                (
                    "wallet",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="administrative_user",
                        to="ecommerce.wallet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário Administrativo",
                "verbose_name_plural": "Usuários Administrativos",
                "permissions": (
                    ("bo_can_view_affiliates", "Can view affiliates"),
                    ("bo_can_edit_affiliates", "Can edit affiliates"),
                    ("bo_can_view_and_edit_managers", "Can view and edit managers"),
                    (
                        "bo_can_view_and_edit_supervisors",
                        "Can view and edit supervisors",
                    ),
                    ("bo_can_view_and_edit_players", "Can view and edit players"),
                    (
                        "bo_can_view_and_edit_withdraw_requests",
                        "Can view and edit withdraw requests",
                    ),
                    (
                        "bo_can_view_and_edit_configurations",
                        "Can view and edit configurations",
                    ),
                    ("bo_can_view_and_edit_awards", "Can view and edit awards"),
                    ("bo_can_edit_user_bonus", "Can edit user bonus"),
                    (
                        "bo_can_view_and_edit_administration_commissions",
                        "Can view and edit administrative user commissions",
                    ),
                    (
                        "bo_can_view_and_edit_affiliates_commissions",
                        "Can view and edit affiliates commissions",
                    ),
                ),
            },
            managers=[
                ("objects", ecommerce.models.administration.CustomTreeUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Affiliate",
            fields=[
                (
                    "userapi_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="ecommerce.userapi",
                    ),
                ),
                (
                    "commission",
                    models.CharField(
                        choices=[("LIQUID", "Líquido"), ("GROSS", "Bruto")],
                        default="GROSS",
                        max_length=10,
                    ),
                ),
                (
                    "user_above",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affiliates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Afiliado",
                "verbose_name_plural": "Afiliados",
            },
            bases=("ecommerce.userapi",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "affiliate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ecommerce.affiliateconfig",
                    ),
                ),
                (
                    "deposit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ecommerce.firstdeposit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuração",
                "verbose_name_plural": "Configurações",
            },
        ),
        migrations.CreateModel(
            name="LotteryDraw",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("date", models.DateTimeField()),
                ("draw_trigger_date", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                ("results", models.TextField(blank=True, null=True)),
                (
                    "lottery",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="draws",
                        to="ecommerce.lottery",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sorteio da Loteria",
                "verbose_name_plural": "Sorteios das Loterias",
            },
        ),
        migrations.CreateModel(
            name="Modality",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                ("number_separator", models.BooleanField(default=False)),
                (
                    "max_len_input_guess",
                    models.IntegerField(
                        default=10,
                        help_text="Máximo de caracteres para o input do palpite",
                        verbose_name="Qtd. máxima de dígitos",
                    ),
                ),
                (
                    "min_len_input_guess",
                    models.IntegerField(
                        default=2,
                        help_text="Mínimo de caracteres para o input do palpite",
                        verbose_name="Qtd. mínima de dígitos",
                    ),
                ),
                (
                    "max_quantity_guess",
                    models.IntegerField(
                        default=100,
                        help_text="Máximo de palpites por aposta",
                        verbose_name="Qtd. máxima de palpites",
                    ),
                ),
                (
                    "max_guess_value",
                    models.IntegerField(
                        default=25,
                        help_text="Número máximo do palpite",
                        verbose_name="Valor máximo do palpite",
                    ),
                ),
                (
                    "max_bet_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=100,
                        help_text="Valor máximo da aposta",
                        max_digits=10,
                        verbose_name="Máximo valor de aposta",
                    ),
                ),
                (
                    "min_bet_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=1,
                        help_text="Valor mínimo da aposta",
                        max_digits=10,
                        verbose_name="Mínimo valor de aposta",
                    ),
                ),
                ("big_guess", models.BooleanField(default=False)),
                (
                    "ref",
                    models.ForeignKey(
                        blank=True,
                        help_text="Referência para modalidades que são variações de outras modalidades. (INV)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="referrals",
                        to="ecommerce.modality",
                    ),
                ),
            ],
            options={
                "verbose_name": "Modalidade",
                "verbose_name_plural": "Modalidades",
            },
        ),
        migrations.AddField(
            model_name="lottery",
            name="modalities",
            field=models.ManyToManyField(
                related_name="lotteries", to="ecommerce.modality"
            ),
        ),
        migrations.CreateModel(
            name="PlacingModality",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "modality",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modality_lotteries",
                        to="ecommerce.modality",
                    ),
                ),
                (
                    "placing",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="placing_modalities",
                        to="ecommerce.placing",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuração da Modalidade e Colocação",
                "verbose_name_plural": "Configurações das Modalidades e Colocações",
                "unique_together": {("modality", "placing")},
            },
        ),
        migrations.AddField(
            model_name="modality",
            name="placements",
            field=models.ManyToManyField(
                blank=True,
                related_name="modalities",
                through="ecommerce.PlacingModality",
                to="ecommerce.placing",
            ),
        ),
        migrations.CreateModel(
            name="Pule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("lotery_key", models.CharField(max_length=255)),
                (
                    "hash",
                    models.UUIDField(
                        default=ecommerce.models.pule.generate_hash,
                        editable=False,
                        unique=True,
                    ),
                ),
                ("value_total", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "guesses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255), size=None
                    ),
                ),
                (
                    "cashout",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "profit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("win", models.BooleanField(default=False)),
                (
                    "type",
                    models.CharField(
                        choices=[("EACH", "Cada"), ("ALL", "Todos")], max_length=255
                    ),
                ),
                (
                    "lottery_draw",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bets",
                        to="ecommerce.lotterydraw",
                    ),
                ),
                (
                    "modality",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bets",
                        to="ecommerce.modality",
                    ),
                ),
                (
                    "placing",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bets",
                        to="ecommerce.placing",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pules",
                        to="ecommerce.userapi",
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pules_seller",
                        to="ecommerce.affiliate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cartela",
                "verbose_name_plural": "Cartelas",
            },
        ),
        migrations.CreateModel(
            name="Bet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lotery_key", models.CharField(max_length=255)),
                ("bet_value", models.DecimalField(decimal_places=2, max_digits=10)),
                ("guess", models.CharField(max_length=255)),
                (
                    "cashout",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "profit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("modality_name", models.CharField(max_length=255)),
                ("award_ranges", models.CharField(max_length=255)),
                ("win", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "win_multiplier",
                    models.DecimalField(decimal_places=2, default=1, max_digits=10),
                ),
                ("draw_date", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bets",
                        to="ecommerce.userapi",
                    ),
                ),
                (
                    "pule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bets",
                        to="ecommerce.pule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Aposta",
                "verbose_name_plural": "Apostas",
            },
        ),
        migrations.AddField(
            model_name="userapi",
            name="quotation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user",
                to="ecommerce.quotation",
            ),
        ),
        migrations.CreateModel(
            name="AffiliateQuotation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        default=ecommerce.models.affiliate_quotation.generate_code_affiliate,
                        max_length=4,
                        unique=True,
                    ),
                ),
                ("percent", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "quotation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ecommerce.quotation",
                    ),
                ),
                (
                    "affiliate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affiliate_quotations",
                        to="ecommerce.affiliate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Quotação por Afiliado",
                "verbose_name_plural": "Quotações por Afiliados",
                "unique_together": {("affiliate", "quotation")},
            },
        ),
        migrations.AddField(
            model_name="affiliateconfig",
            name="quotation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="ecommerce.quotation"
            ),
        ),
        migrations.CreateModel(
            name="QuotationModality",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "multiplier",
                    models.DecimalField(decimal_places=2, default=4, max_digits=10),
                ),
                (
                    "modality",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modality_quotations",
                        to="ecommerce.modality",
                    ),
                ),
                (
                    "quotation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quotation_modalities",
                        to="ecommerce.quotation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuração da Premiação",
                "verbose_name_plural": "Configurações das Premiações",
                "unique_together": {("modality", "quotation")},
            },
        ),
        migrations.AddField(
            model_name="quotation",
            name="modalities",
            field=models.ManyToManyField(
                related_name="quotations",
                through="ecommerce.QuotationModality",
                to="ecommerce.modality",
            ),
        ),
        migrations.CreateModel(
            name="Verification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        default=ecommerce.models.verification.generate_token,
                        max_length=6,
                        unique=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("REGISTER", "Registro"),
                            ("UPDATE_PERFIL", "Atualização de Perfil"),
                            ("RECOVERY_PASSWORD", "Recuperação de Senha"),
                        ],
                        max_length=20,
                    ),
                ),
                ("actived", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        default=ecommerce.utils.verifications.get_expiration_time
                    ),
                ),
                (
                    "resend_expires_at",
                    models.DateTimeField(
                        default=ecommerce.utils.verifications.get_datetime_now
                    ),
                ),
                ("data", models.JSONField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ecommerce.userapi",
                    ),
                ),
            ],
            options={
                "verbose_name": "Verificação",
                "verbose_name_plural": "Verificações",
            },
        ),
        migrations.AddField(
            model_name="userapi",
            name="wallet",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user",
                to="ecommerce.wallet",
            ),
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("DEBIT", "Débito"),
                            ("CREDIT", "Crédito"),
                            ("WITHDRAW", "Saque"),
                            ("DEPOSIT", "Depósito"),
                            ("COMMISSION", "Comissão"),
                            ("BONUS", "Bônus"),
                            ("BONUS_DEBIT", "Débito de Bônus"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pendente"),
                            ("APPROVED", "Aprovado"),
                            ("REPROVED", "Reprovado"),
                            ("CANCELED", "Cancelado"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "balance_before",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("balance_after", models.DecimalField(decimal_places=2, max_digits=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "draw",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transações",
                        to="ecommerce.lotterydraw",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transações",
                        to="ecommerce.wallet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transação do dinheiro",
                "verbose_name_plural": "Transações dos dinheiros",
            },
        ),
        migrations.CreateModel(
            name="MoneyMoviment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("DEBIT", "Débito"),
                            ("CREDIT", "Crédito"),
                            ("WITHDRAW", "Saque"),
                            ("DEPOSIT", "Depósito"),
                            ("COMMISSION", "Comissão"),
                            ("BONUS", "Bônus"),
                            ("BONUS_DEBIT", "Débito de Bônus"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pendente"),
                            ("APPROVED", "Aprovado"),
                            ("REPROVED", "Reprovado"),
                            ("CANCELED", "Cancelado"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "balance_before",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("balance_after", models.DecimalField(decimal_places=2, max_digits=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="money_moviments",
                        to="ecommerce.bet",
                    ),
                ),
                (
                    "quotation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="money_moviments",
                        to="ecommerce.quotation",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="money_moviments",
                        to="ecommerce.wallet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Movimento do dinheiro da aposta",
                "verbose_name_plural": "Movimentos do dinheiro das apostas",
            },
        ),
        migrations.AddField(
            model_name="quotation",
            name="affiliates",
            field=models.ManyToManyField(
                related_name="quotations",
                through="ecommerce.AffiliateQuotation",
                to="ecommerce.affiliate",
            ),
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "userapi_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="ecommerce.userapi",
                    ),
                ),
                (
                    "associated_affiliate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ecommerce.affiliate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cliente",
                "verbose_name_plural": "Clientes",
            },
            bases=("ecommerce.userapi",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
